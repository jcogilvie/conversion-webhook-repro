#!/bin/bash
set -e

# Change to project root directory (one level up from scripts)
cd "$(dirname "$0")/.."

echo "üî• Simulating CRD Evolution with Broken Conversion Webhook"
echo "=========================================================="

echo "üìã Current scenario:"
echo "‚Ä¢ CRD has v1 (storage) and v2 (served) without conversion webhook"
echo "‚Ä¢ Resources exist in both API versions"
echo "‚Ä¢ Argo CD is managing applications successfully"
echo ""
echo "üéØ Simulation: Adding conversion webhook pointing to non-existent service"
echo "This mimics real-world scenarios where:"
echo "‚Ä¢ CRDs evolve to add conversion webhooks"
echo "‚Ä¢ Webhook services become unavailable after CRD update"
echo "‚Ä¢ Existing resources become inaccessible due to conversion failures"

echo ""
echo "üéØ Switching to target cluster..."
kubectl config use-context kind-target-cluster

echo "üìã Step 1: Verify current state - resources accessible in both API versions"
echo "(Before removing webhook service and applying broken CRD)"
echo "V1 resources:"
kubectl get examples.v1.conversion.example.com || echo "‚ö†Ô∏è V1 API already broken - continuing with break process"
echo ""
echo "V2 resources:"
kubectl get examples.v2.conversion.example.com || echo "‚ö†Ô∏è V2 API already broken - continuing with break process"
echo ""

echo "üîÑ Switching back to Argo CD cluster..."
kubectl config use-context kind-argocd-cluster

echo "üóëÔ∏è  Step 2: Remove webhook service application if it exists"
echo "This simulates the webhook service being unavailable/deleted"

# Check if the application exists before trying to delete it
if kubectl get application webhook-service-app -n argocd >/dev/null 2>&1; then
  echo "üì± Webhook service application found, deleting..."
  kubectl delete application webhook-service-app -n argocd

  echo "‚è≥ Waiting for application deletion to complete (due to finalizers)..."
  # Wait for the application to be completely removed
  while kubectl get application webhook-service-app -n argocd >/dev/null 2>&1; do
    echo "   Application still exists, waiting for finalizer cleanup..."
    sleep 5
  done
  echo "‚úÖ Webhook service application completely removed"

  echo "‚è≥ Waiting for Argo CD to clean up webhook service resources in target cluster..."
  # Give Argo CD a moment to process the deletion and clean up resources
  sleep 5
else
  echo "‚úÖ Webhook service app doesn't exist (expected for first run)"
fi

echo ""
# Verify the webhook service is gone from target cluster
kubectl config use-context kind-target-cluster
echo "üîç Verifying webhook service removal..."
kubectl get svc conversion-webhook-service -n webhook-system && echo "‚ö†Ô∏è Service still exists" || echo "‚úÖ Webhook service removed"
kubectl get pods -l app=conversion-webhook -n webhook-system && echo "‚ö†Ô∏è Pods still exist" || echo "‚úÖ Webhook pods removed"

echo "üìã Step 3: Apply CRD evolution - adding broken conversion webhook"
echo "This simulates a CRD update that adds conversion webhook but the service is unavailable"
kubectl apply -f manifests/crd-with-broken-webhook.yaml || echo "‚ö†Ô∏è CRD may already be in broken state"

echo "‚úÖ CRD updated with conversion webhook pointing to non-existent service"

echo ""
echo "üìã Step 4: Test direct impact on target cluster"
echo "Attempting to access resources should now fail due to broken conversion webhook..."

echo ""
echo "üîç Testing v1 API access (should fail):"
kubectl get examples.v1.conversion.example.com || echo "‚ùå V1 API access failed as expected"

echo ""
echo "üîç Testing v2 API access (should fail):"
kubectl get examples.v2.conversion.example.com || echo "‚ùå V2 API access failed as expected"

echo ""
echo "üîç Testing generic API access (should fail):"
kubectl get examples || echo "‚ùå Generic API access failed as expected"

echo ""
echo "üîÑ Step 5: Switch to Argo CD cluster and trigger cache invalidation"
kubectl config use-context kind-argocd-cluster

echo "üì± Step 6: Force Argo CD to refresh target cluster cache"
echo "This simulates Argo CD discovering the broken CRD state..."

# Get the target server URL and encode it for the API call
TARGET_SERVER_RAW=$(kubectl config view --context=kind-target-cluster -o jsonpath='{.clusters[?(@.name=="kind-target-cluster")].cluster.server}')
TARGET_CONTAINER_IP=$(docker inspect target-cluster-control-plane --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}')
TARGET_SERVER="https://${TARGET_CONTAINER_IP}:6443"

# Double URL encode the target server for the API call
DOUBLE_ENCODED_SERVER=$(echo "$TARGET_SERVER" | sed 's/:/%253A/g' | sed 's/\//%252F/g')

echo "üîÑ Method 1: Invalidate cluster cache via Argo CD API (with authentication)"
echo "Using cluster: $TARGET_SERVER"

echo "üîç Checking Argo CD API connectivity..."
if curl -k -s --connect-timeout 3 "https://localhost:8080/api/version" > /dev/null 2>&1; then
  echo "‚úÖ Argo CD API is accessible at localhost:8080"

  # Get the admin password from the Kubernetes secret
  ADMIN_PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)

  # First, login to get a session token
  echo "üîê Authenticating with Argo CD..."

  # Create JSON payload properly
  JSON_PAYLOAD=$(printf '{"username":"admin","password":"%s"}' "$ADMIN_PASSWORD")

  # Try authentication using HTTPS
  echo "üîÑ Attempting login via HTTPS..."
  LOGIN_RESPONSE=$(curl -k -s -X POST \
    "https://localhost:8080/api/v1/session" \
    -H "Content-Type: application/json" \
    -d "$JSON_PAYLOAD" \
    2>/dev/null || echo 'CURL_FAILED')

  # Check if login was successful and extract token
  if echo "$LOGIN_RESPONSE" | grep -q '"token"'; then
    TOKEN=$(echo "$LOGIN_RESPONSE" | sed -n 's/.*"token":"\([^"]*\)".*/\1/p')

    if [[ -n "$TOKEN" && "$TOKEN" != "null" ]]; then
      echo "‚úÖ Authentication successful"

      # Now call the cache invalidation API with the token
      echo "üîÑ Calling cache invalidation API..."
      RESPONSE=$(curl -k -s -L -X POST \
        "https://localhost:8080/api/v1/clusters/$DOUBLE_ENCODED_SERVER/invalidate-cache" \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer $TOKEN" \
        -d '{}' \
        2>/dev/null || echo "CACHE_INVALIDATION_FAILED")

      if [[ "$RESPONSE" == *"CACHE_INVALIDATION_FAILED"* ]]; then
        echo "‚ö†Ô∏è Cache invalidation API call failed"
      else
        echo "‚úÖ Cache invalidation successful"

        # Parse the response to check cluster connection state
        if echo "$RESPONSE" | grep -q '"status":"Failed"'; then
          CONNECTION_MESSAGE=$(echo "$RESPONSE" | sed -n 's/.*"message":"\([^"]*\)".*/\1/p')
          if echo "$CONNECTION_MESSAGE" | grep -q "conversion-webhook-service.*not found"; then
            echo "üéØ Confirmed: Argo CD detected the broken conversion webhook"
            echo "   Error: conversion webhook service not found"
          elif echo "$CONNECTION_MESSAGE" | grep -q "conversion webhook.*failed"; then
            echo "üéØ Confirmed: Argo CD detected conversion webhook failure"
          else
            echo "üîç Cluster connection failed for different reason:"
            echo "   $(echo "$CONNECTION_MESSAGE" | sed 's/\\"/"/g')"
          fi
        else
          echo "‚ö†Ô∏è Expected cluster connection failure but cluster appears healthy"
          echo "   The webhook break may not have taken effect yet"
        fi
      fi
    else
      echo "‚ö†Ô∏è Could not extract token from login response"
    fi
  else
    echo "‚ö†Ô∏è Login failed or invalid response"
    echo ""
    echo "üîç Debugging steps:"
    echo "1. Verify port-forward is working: curl -k https://localhost:8080/api/version"
    echo "2. Check admin password: kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath='{.data.password}' | base64 -d"
    echo "3. Test manual login via UI: https://localhost:8080"
    echo "4. Manual curl test: curl -k -X POST https://localhost:8080/api/v1/session -H 'Content-Type: application/json' -d '{\"username\":\"admin\",\"password\":\"YOURPASSWORD\"}'"
  fi
else
  echo "‚ö†Ô∏è Argo CD API not accessible at localhost:8080"
  echo "üí° To enable API access, run in another terminal:"
  echo "   kubectl port-forward svc/argocd-server -n argocd 8080:443 &"
  echo ""
  echo "üîÑ Alternative: Manual cache invalidation via UI"
  ENCODED_TARGET_SERVER=$(echo "$TARGET_SERVER" | sed 's/:/%3A/g' | sed 's/\//%2F/g')
  echo "   1. Start port-forward: kubectl port-forward svc/argocd-server -n argocd 8080:443 &"
  echo "   2. Access Argo CD: https://localhost:8080"
  echo "   3. Navigate to cluster settings: https://localhost:8080/settings/clusters/$ENCODED_TARGET_SERVER"
  echo "   4. Click 'Invalidate Cache' button"
  echo ""
  echo "üìã For now, continuing with application refresh method..."
fi

echo ""
echo "üîÑ Method 2: Force application refresh (triggers cache rebuild)"
kubectl patch application external-cluster-app -n argocd --type='merge' -p='{"operation":{"initiatedBy":{"username":"admin"},"info":[{"name":"reason","value":"force-refresh-after-crd-evolution"}]}}' || echo "Patch failed - this is expected"

echo ""
echo "üìä Step 7: Check application status for cluster-wide failure"
echo "All applications targeting the cluster should now show errors..."

kubectl get applications -n argocd

echo ""
echo "üî• CRD Evolution Webhook Failure Complete!"
echo "==========================================="
echo ""
echo "üéØ What just happened:"
echo "1. ‚úÖ Checked current state (may have been already broken - script continues)"
echo "2. üóëÔ∏è  Removed webhook service application (simulating service unavailability)"
echo "3. üî• Updated CRD to add conversion webhook pointing to non-existent service"
echo "4. üí• All API access to the CRD now fails due to broken webhook"
echo "5. üåä Argo CD cache refresh discovers the broken state"
echo "6. ‚ùå ALL applications in target cluster should now show errors"
echo ""
echo "üß† Key Mechanism: v1 is storage version, v2 is served"
echo "   ‚Ä¢ When Argo CD accesses any CRD resource, Kubernetes must convert"
echo "   ‚Ä¢ from v1 (storage) to v2 (served) or vice versa"
echo "   ‚Ä¢ This triggers the conversion webhook for EVERY resource access"
echo "   ‚Ä¢ With webhook broken, ALL CRD operations fail cluster-wide"
echo ""
echo "üîç Check for the target error patterns:"
echo "kubectl logs -l app.kubernetes.io/name=argocd-application-controller -n argocd --tail=50"
echo ""
echo "üì± Check application status:"
echo "kubectl get applications -n argocd"
echo "kubectl describe application external-cluster-app -n argocd"
echo ""
echo "üåê Check Argo CD UI (if port-forward is running):"
echo "https://localhost:8080 - all apps targeting the cluster should be 'Unknown' status"
echo ""
echo "üîç Expected error patterns:"
echo "- 'Failed to load target state'"
echo "- 'conversion webhook for conversion.example.com/v1, Kind=Example failed'"
echo "- 'service \"conversion-webhook-service\" not found'"
echo "- Applications show 'Unknown' health status"
echo ""
echo "üîÑ Script is idempotent - can be run multiple times safely"
echo "üõ†Ô∏è  Run './scripts/fix.sh' to restore functionality via Argo"
